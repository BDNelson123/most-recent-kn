== FlyingTree Api

This is the RESTful  API for Flying Tree written in Ruby-on-Rails.

It currently consists of the following models:

* users <br>
-- These are the players of FlyingTree <br>
-- The devise_token_auth gem was used for authentication here. <br>
-- The model is users and is namespaced under auth. <br>
-- To access this API, use the generic URLs supplied from the devise_token_auth gem located at https://github.com/lynndylanhurley/devise_token_auth <br><br>

Here is an excerpt from it:

<table>
<thead>
<tr>
<th align="left">path</th>
<th align="left">method</th>
<th align="left">purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">/</td>
<td align="left">POST</td>
<td align="left">Email registration. Accepts <strong><code>email</code></strong>, <strong><code>password</code></strong>, and <strong><code>password_confirmation</code></strong> params. A verification email will be sent to the email address provided. Accepted params can be customized using the <a href="https://github.com/plataformatec/devise#strong-parameters"><code>devise_parameter_sanitizer</code></a> system.</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">DELETE</td>
<td align="left">Account deletion. This route will destroy users identified by their <strong><code>uid</code></strong> and <strong><code>auth_token</code></strong> headers.</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">PUT</td>
<td align="left">Account updates. This route will update an existing user's account settings. The default accepted params are <strong><code>password</code></strong> and <strong><code>password_confirmation</code></strong>, but this can be customized using the <a href="https://github.com/plataformatec/devise#strong-parameters"><code>devise_parameter_sanitizer</code></a> system.</td>
</tr>
<tr>
<td align="left">/sign_in</td>
<td align="left">POST</td>
<td align="left">Email authentication. Accepts <strong><code>email</code></strong> and <strong><code>password</code></strong> as params. This route will return a JSON representation of the <code>User</code> model on successful login.</td>
</tr>
<tr>
<td align="left">/sign_out</td>
<td align="left">DELETE</td>
<td align="left">Use this route to end the user's current session. This route will invalidate the user's authentication token.</td>
</tr>
<tr>
<td align="left">/:provider</td>
<td align="left">GET</td>
<td align="left">Set this route as the destination for client authentication. Ideally this will happen in an external window or popup. <a href="#omniauth-authentication">Read more</a>.</td>
</tr>
<tr>
<td align="left">/:provider/callback</td>
<td align="left">GET/POST</td>
<td align="left">Destination for the oauth2 provider's callback uri. <code>postMessage</code> events containing the authenticated user's data will be sent back to the main client window from this page. <a href="#omniauth-authentication">Read more</a>.</td>
</tr>
<tr>
<td align="left">/validate_token</td>
<td align="left">GET</td>
<td align="left">Use this route to validate tokens on return visits to the client. Accepts <strong><code>uid</code></strong> and <strong><code>auth_token</code></strong> as params. These values should correspond to the columns in your <code>User</code> table of the same names.</td>
</tr>
<tr>
<td align="left">/password</td>
<td align="left">POST</td>
<td align="left">Use this route to send a password reset confirmation email to users that registered by email. Accepts <strong><code>email</code></strong> and <strong><code>redirect_url</code></strong> as params. The user matching the <code>email</code> param will be sent instructions on how to reset their password. <code>redirect_url</code> is the url to which the user will be redirected after visiting the link contained in the email.</td>
</tr>
<tr>
<td align="left">/password</td>
<td align="left">PUT</td>
<td align="left">Use this route to change users' passwords. Accepts <strong><code>password</code></strong> and <strong><code>password_confirmation</code></strong> as params. This route is only valid for users that registered by email (OAuth2 users will receive an error).</td>
</tr>
<tr>
<td align="left">/password/edit</td>
<td align="left">GET</td>
<td align="left">Verify user by password reset token. This route is the destination URL for password reset confirmation. This route must contain <strong><code>reset_password_token</code></strong> and <strong><code>redirect_url</code></strong> params. These values will be set automatically by the confirmation email that is generated by the password reset request.</td>
</tr>
</tbody>
</table>

<b>Example for "Create User" would be:</b>
URL: http://example.com/auth
Method: Post
